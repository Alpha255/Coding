$$HeaderBegin
#pragma once

#include "Public/IRenderApplication.h"

class $$REPLACE : public IRenderApplication
{
public:
	$$REPLACE() = default;
	$$REPLACE() = default;

    void PrepareScene() override;
    void RenderScene() override;
protected:
private:
};
$$HeaderEnd

$$CppBegin
#include "$$REPLACE"
#include "Public/Definitions.h"
#include "Public/ImGUI.h"

void $$REPLACE::PrepareScene()
{
}

void $$REPLACE::RenderScene()
{
    REngine::Instance().ResetDefaultRenderSurfaces();
    REngine::Instance().SetViewport(D3DViewport(0.0f, 0.0f, (float)m_Width, (float)m_Height));
}
$$CppEnd

$$ShaderBegin
cbuffer cbVS
{
    matrix WVP;
};

struct VSInput
{
    float3 Pos : POSITION;
    float3 Normal : NORMAL;
    float3 Tangent : TANGENT;
    float2 UV : TEXCOORD;
};

struct VSOutput
{
    float4 Pos : SV_POSITION;
    float2 UV : TEXCOORD;
};

VSOutput VSMain(VSInput vsInput)
{
    VSOutput output;
    output.Pos = mul(float4(vsInput.Pos, 1.0f), WVP);
    output.UV = vsInput.UV;

    return output;
}

float4 PSMain(VSOutput psInput) : SV_Target
{
    return float4(0.84f, 0.84f, 0.84f, 1.0f);
}
$$ShaderEnd

$$MainBegin
#include "$$REPLACE.h"

int32_t WINAPI wWinMain(HINSTANCE, HINSTANCE, LPWSTR, int32_t)
{
	$$REPLACE $$REPLACE;

	$$REPLACE.Initialize("$$REPLACE");

	$$REPLACE.Loop();

	$$REPLACE.Finalize();

	return 0;
}
$$MainEnd
